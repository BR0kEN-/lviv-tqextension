---
- hosts: vagrant
  gather_facts: yes
  sudo: yes

  vars_files:
    - vars/main.yml

  tasks:
    - name: Getting timestamp
      shell: date +'%Y_%m_%d_%M_%S'
      register: backup_name_raw
      when: pp_environment == "stage" or make_backup

    - name: Getting name for backup
      set_fact:
        backup_name: "{{ backup_name_raw.stdout }}"
      when: pp_environment == "stage" or make_backup

    - name: Creating backup folder
      file:
        path: "{{ backup_folder }}"
        state: directory
        recurse: yes

    - name: Making regular backup
      mysql_db:
        name: staging
        state: dump
        target: "{{ backup_folder }}/{{ backup_name }}.sql.gz"
        login_user: "{{ mysql.user }}"
        login_password: "{{ mysql.pass }}"
      when: pp_environment == "stage" or make_backup

    - name: Check if latest backup exists
      stat:
        path: "{{ backup_folder }}/latest.sql.gz"
      register: latest_backup_exists
      when: workflow_type == "sql"

    - name: Create initial backup from staging
      mysql_db:
        name: staging
        state: dump
        target: "{{ backup_folder }}/latest.sql.gz"
        login_user: "{{ mysql.user }}"
        login_password: "{{ mysql.pass }}"
      when: make_backup and workflow_type == "sql" and latest_backup_exists.stat.exists == false

    - name: Downloading latest backup
      get_url:
        url: "{{ source_database }}"
        dest: "{{ backup_folder }}/latest_remote.sql.gz"
        force: yes
      when: workflow_type == "sql" and pp_environment == "default"

    - name: Dropping Drupal database
      mysql_db:
        name: "{{ databases.default }}"
        state: absent
        login_user: "{{ mysql.user }}"
        login_password: "{{ mysql.pass }}"
      when: pp_environment == "demo" or pp_environment == "default" or workflow_type == "profile"

    - name: Creating Drupal database
      mysql_db:
        name: "{{ databases.default }}"
        state: present
        login_user: "{{ mysql.user }}"
        login_password: "{{ mysql.pass }}"

    - name: Importing from remote backup
      mysql_db:
        name: "{{ databases.default }}"
        state: import
        target: "{{ backup_folder }}/latest_remote.sql.gz"
        login_user: "{{ mysql.user }}"
        login_password: "{{ mysql.pass }}"
      when: workflow_type == "sql" and pp_environment == "default"

    - name: Copy local backup to build folder
      copy:
        src: "{{ backup_folder }}/latest.sql.gz"
        dest: ./latest.sql.gz
        mode: 0644
        force: yes
      when: make_backup and workflow_type == "sql" and (pp_environment == "default" or pp_environment == "demo")

    - name: Importing from local backup
      mysql_db:
        name: "{{ databases.default }}"
        state: import
        target: ./latest.sql.gz
        login_user: "{{ mysql.user }}"
        login_password: "{{ mysql.pass }}"
      when: make_backup and workflow_type == "sql" and (pp_environment == "default" or pp_environment == "demo")

    - name: Remove local backup from build folder
      file:
        name: ./latest.sql.gz
        state: absent
      when: workflow_type == "sql" and (pp_environment == "default" or pp_environment == "demo")

    - name: Creating cache folder
      file:
        path: "{{ cache_folder }}"
        state: directory
        recurse: yes

    - name: Remove settings.php
      shell: "rm {{ docroot }}/sites/default/settings.php"
#      file:
#        name: "{{ docroot }}/sites/default/settings.php"
#        state: absent

    - name: Installing Drupal
      shell: "cd {{ docroot }} && drush -y si {{ installation_profile_name }} --db-url=mysql://{{ mysql.user }}:{{ mysql.pass }}@127.0.0.1:/{{ databases.default }} --account-name={{ drupal.user }} --account-pass={{ drupal.pass }} --uri={{ site_url }}"
      environment: env_vars
      when: workflow_type == "profile"

    - name: Making permissions usable
      file:
        dest: "{{ docroot }}/sites/default"
        mode: 0755
        state: directory

    - name: Creating settings.php
      shell: "cd {{ docroot }} && cp sites/default/default.settings.php sites/default/settings.php"

    - name: Adding base_url variable to settings.php
      lineinfile:
        dest: "{{ docroot }}/sites/default/settings.php"
        line: "$base_url = '{{ site_url }}';"

    - name: Generating databases configs
      sudo: no
      template:
        src: templates/databases.j2
        dest: ./databases.settings.php
        mode: 0644
      with_dict: databases
      delegate_to: localhost

    - name: Write databases config into settings.php
      lineinfile:
        dest: "{{ docroot }}/sites/default/settings.php"
        line: "{{ lookup('file', 'databases.settings.php') }}"

    - name: Remove temporary file with generated settings for databases
      sudo: no
      file:
        path: databases.settings.php
        state: absent
      delegate_to: localhost

#    - name: Random prefix for memcache to settings.php
#      lineinfile:
#        dest: "{{ docroot }}/sites/default/settings.php"
#        line: "$conf['memcache_key_prefix'] = '{{ pp_environment }}';"
#      when: pp_environment == "CHANGE_ME"
#
#    - name: Memcache settings to settings.php
#      lineinfile:
#        dest: "{{ docroot }}/sites/default/settings.php"
#        line: "$conf['cache_backends'][] = 'sites/all/modules/contrib/memcache/memcache.inc';"
#      when: pp_environment == "CHANGE_ME"
#
#    - name: Memcache settings to settings.php
#      lineinfile:
#        dest: "{{ docroot }}/sites/default/settings.php"
#        line: "$conf['cache_default_class'] = 'MemCacheDrupal';"
#      when: pp_environment == "CHANGE_ME"

    - name: Adding environment variable to settings.php
      lineinfile:
        dest: "{{ docroot }}/sites/default/settings.php"
        line: "$conf['pp_environment'] = '{{ pp_environment }}';"

    - name: Stage File Proxy settings
      lineinfile:
        dest: "{{ docroot }}/sites/default/settings.php"
        line: "$conf['stage_file_proxy_origin'] = '{{ origin_site_url }}';"
      when: pp_environment == "demo" or pp_environment == "default"

    - name: Check if registry_rebuild is installed
      shell: "cd {{ docroot }} && drush | grep -c registry_rebuild"
      environment: env_vars
      register: registry_rebuild_installed
      ignore_errors: true

    - name: Downloading registry_rebuild
      sudo: no
      shell: "cd {{ docroot }} && drush -y dl registry_rebuild"
      environment: env_vars
      when: registry_rebuild_installed.rc != 0

    - name: Clear Drush cache
      shell: "drush cc drush"
      environment: env_vars
      when: registry_rebuild_installed.rc != 0

    - name: Rebuilding drupal registry
      shell: "cd {{ docroot }} && drush -y rr -l {{ site_url }}"
      environment: env_vars
      when: workflow_type == "sql"

    - name: Set proper temp dir
      shell: "cd {{ docroot }} && drush vset file_temporary_path {{ drupal_tmp_dir }}"
      environment: env_vars
      when: workflow_type == "sql"

    - name: Enable module Stage File Proxy
      shell: "cd {{ docroot }} && drush en stage_file_proxy -y"
      environment: env_vars
      when: pp_environment == "demo" or pp_environment == "default"

    - name: Creating latest staging backup
      mysql_db:
        name: staging
        state: dump
        target: "{{ backup_folder }}/latest.sql.gz"
        login_user: "{{ mysql.user }}"
        login_password: "{{ mysql.pass }}"
      when: make_backup and pp_environment == "stage" or make_backup

    - name: Solr - clearing index
      shell: "cd {{ docroot }} && drush -y search-api-clear -l {{ site_url }}"
      environment: env_vars
      when: pp_environment == "CHANGE_ME"

    - name: Solr - reindexing
      shell: "cd {{ docroot }} && drush -y search-api-index -l {{ site_url }}"
      environment: env_vars
      when: pp_environment == "CHANGE_ME"

    - name: Error messages to display settings
      shell: "cd {{ docroot }} && drush vset error_level 2"
      environment: env_vars
      when: pp_environment == "default"

    - name: Enable initial modules
      shell: "cd {{ docroot }} && drush en {{ item }} -y"
      environment: env_vars
      with_items: modules_to_enable

    - name: Updating database
      shell: "cd {{ docroot }} && drush -dvy updb -l {{ site_url }}"
      environment: env_vars
      when: workflow_type == "sql"

    - name: Revert features
      shell: "cd {{ docroot }} && drush fr {{ item }} -y"
      environment: env_vars
      with_items: features_to_revert

    - name: Set writable files dir
      file:
        dest: "{{ docroot }}/sites/default/files"
        mode: 0777
        state: directory
