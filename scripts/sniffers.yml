---
- hosts: vagrant
  gather_facts: yes
  sudo: yes

  vars_files:
    - vars/main.yml
    - vars/testing.yml

  vars:
    phpcs_scan_dirs:
      - "{{ docroot }}/sites/all/*/custom"

    git_repos:
      - branch: master
        repo: http://git.drupal.org/sandbox/coltrane/1921926.git
        name: DrupalSecure

      - branch: 7.x-1.x
        repo: https://github.com/klausi/drupalpractice.git
        name: DrupalPractice

      - branch: master
        repo: https://github.com/podarok/phpcs-security-audit.git
        name: Security

      - branch: master
        repo: https://github.com/podarok/Symfony2-coding-standard.git
        name: Symfony2

    phpcs_standards:
      - vendor/drupal/coder/coder_sniffer/Drupal
      - vendor/podarok/DrupalSecure/DrupalSecure
      - vendor/podarok/Security/Security
      - vendor/podarok/DrupalPractice/DrupalPractice

    npm_packages:
      - jshint

    gem_packages:
      - scss-lint

    sniffers_apt_repos:
      - ppa:chris-lea/node.js

    sniffers_apt_packages:
      - ruby1.9.1
      - ruby1.9.1-dev
      - rubygems1.9.1
      - irb1.9.1
      - ri1.9.1
      - rdoc1.9.1
      - build-essential
      - libopenssl-ruby1.9.1
      - libssl-dev
      - zlib1g-dev
      - nodejs

  pre_tasks:
    - name: Install APT repos
      apt_repository:
        repo: "{{ item }}"
      with_items: sniffers_apt_repos

    - name: Update APT cache
      apt:
        update_cache: yes
      ignore_errors: yes

    - name: Install APT packages
      apt:
        name: "{{ item }}"
        state: present
      with_items: sniffers_apt_packages

    - name: Install Composer packages
      sudo: yes
      shell: "cd {{ sync_root }} && composer install"

    - name: Clone Git repos
      git:
        repo: "{{ item.repo }}"
        dest: "{{ composer_dir }}/vendor/podarok/{{ item.name }}"
        version: "{{ item.branch }}"
      with_items: git_repos

    - name: Install PHP CodeSniffer standards
      file:
        src: "{{ composer_dir }}/{{ item }}"
        dest: "{{ composer_dir }}/vendor/squizlabs/php_codesniffer/CodeSniffer/Standards/{{ item | basename }}"
        state: link
      with_items: phpcs_standards

    - name: Fix permissions for composer libs
      file:
        path: "{{ composer_dir }}"
        mode: 0655
        state: directory
        recurse: yes

    - name: Create symlink to phpcs binary
      file:
        src: "{{ composer_dir }}/vendor/bin/phpcs"
        dest: /usr/bin/phpcs
        mode: 0655
        state: link
        force: yes

    - name: Install Node.js packages
      npm:
        name: "{{ item }}"
        global: yes
      with_items: npm_packages

    - name: Update ruby alternatives for using ruby 1.9.1(3) version
      shell: "update-alternatives --install /usr/bin/ruby ruby /usr/bin/ruby1.9.1 400 --slave /usr/share/man/man1/ruby.1.gz ruby.1.gz /usr/share/man/man1/ruby1.9.1.1.gz --slave /usr/bin/ri ri /usr/bin/ri1.9.1 --slave /usr/bin/irb irb /usr/bin/irb1.9.1 --slave /usr/bin/rdoc rdoc /usr/bin/rdoc1.9.1"

    - name: Install Gem packages
      shell: "gem install {{ item }}"
      with_items: gem_packages
      ignore_errors: yes

    - name: Clean artifacts file
      file:
        path: "{{ artifacts_file }}"
        state: absent

    - name: Create directory for reports
      file:
        path: "{{ build_reports_dir }}"
        mode: 0755
        state: "{{ item }}"
      with_items:
        - absent
        - directory

  tasks:
    - name: Register variable with reports URL
      set_fact:
        reports_url: "{{ site_url }}/{{ build_reports_dir | basename }}"

    - name: Enable SecurityReview module
      shell: "cd {{ docroot }} && drush en security_review -y"
      environment: env_vars

    - name: Creating SecurityReview report file
      shell: "touch {{ build_reports_dir }}/security_review.txt"

    - name: Run security review
      shell: "cd {{ docroot }} && drush secrev 2>&1 | grep error | tee -a {{ build_reports_dir }}/security_review.txt"
      environment: env_vars

    - name: Create SecurityReview report
      shell: 'if [ -s {{ build_reports_dir }}/security_review.txt ]; then echo "<a href=\"{{ reports_url }}/security_review.txt\" target=\"_blank\">SecurityReview</a>" >> {{ artifacts_file }}; fi'

    - name: Run CodeSniffer
      shell: "phpcs --standard={{ item | basename }} --extensions={{ phpcs_extensions }} -n {{ phpcs_scan_dirs | join(' ') }} --report-file={{ build_reports_dir }}/phpcs.{{ item | basename }}.txt"
      with_items: phpcs_standards
      # Needed for ignoring PHP notices in packages with sniffers.
      ignore_errors: yes

    - name: Create CodeSniffer report
      shell: 'if grep "FOUND\|error" {{ build_reports_dir }}/phpcs.{{ item | basename }}.txt; then echo "<a href=\"{{ reports_url }}/phpcs.{{ item | basename }}.txt\" target=\"_blank\">CodeSniffer {{ item | basename }}</a>" >> {{ artifacts_file }}; fi;'
      with_items: phpcs_standards

    - name: Run JSHint
      shell: 'find {{ item }} ! -path "*mute*" -type f \( -iname "*.js" ! -iname "*min.js" \) -print0 | sudo xargs -0 jshint > {{ build_reports_dir }}/jshint.txt'
      with_items: phpcs_scan_dirs
      # Needed for ignoring exit status codes.
      ignore_errors: yes

    - name: Create JSHint report
      shell: 'if [ -s {{ build_reports_dir }}/jshint.txt ]; then echo "<a href=\"{{ reports_url }}/jshint.txt\" target=\"_blank\">JS Hint</a>" >> {{ artifacts_file }}; fi'

    - name: Run SCSSLint
      shell: 'find {{ item }} -name "*.scss" -print0 | xargs -0 -r scss-lint > {{ build_reports_dir }}/scsslint.txt'
      with_items: phpcs_scan_dirs
      # Needed for ignoring exit status codes.
      ignore_errors: yes

    - name: Create SCSSLint report
      shell: 'if [ -s {{ build_reports_dir }}/scsslint.txt ]; then echo "<a href=\"{{ reports_url }}/scsslint.txt\" target=\"_blank\">SCSS Lint</a>" >> {{ artifacts_file }}; fi'

    - name: Website credentials
      lineinfile:
        dest: "{{ artifacts_file }}"
        line: "Site installed at <a href=\"{{ site_url }}\" target=\"_blank\">{{ site_url }}</a>"
        state: present
